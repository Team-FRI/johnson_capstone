MR41 <- gam(CPUE_Biomass ~ Year.x+Highest_Temperature_C, data = Data_merge_Model)
summary(MR41)
AIC(MR41) #668.42
MR42 <- gam(CPUE_Biomass ~ Month+Highest_Temperature_C, data = Data_merge_Model)
summary(MR42)
AIC(MR42) #688.61
MR43 <- gam(CPUE_Biomass ~ Year.x+Lowest_Temperature_C, data = Data_merge_Model)
summary(MR43)
AIC(MR43) #668.67
MR44 <- gam(CPUE_Biomass ~ Month+Lowest_Temperature_C, data = Data_merge_Model)
summary(MR44)
AIC(MR44) #685.89
#M44 is inserting in terms of lowest temp being almost significant as well as June July August
#January is significant.
MR45 <- gam(CPUE_Biomass ~ Month*Lowest_Temperature_C, data = Data_merge_Model)
summary(MR45)
AIC(MR45) #683.93
#January is still significant, but everything else becomes less signifcant.
MR46 <- gam(CPUE_Biomass ~ Year.x+AvgMin, data = Data_merge_Model)
summary(MR46)
AIC(MR43) #668.67
MR47 <- gam(CPUE_Biomass ~ Month+AvgMin, data = Data_merge_Model)
summary(MR47)
AIC(MR47) #668.70
#M47 is inserting in terms of lowest temp being almost significant as well as June July August.
#January is significant.
MR48 <- gam(CPUE_Biomass~ Year.x+AvgMax, data = Data_merge_Model)
summary(MR48)
AIC(MR48) #668.94
MR49 <- gam(CPUE_Biomass ~ Month+AvgMax, data = Data_merge_Model)
summary(MR49)
AIC(MR49) #690.06
#For M49, January is significant.
MR50 <- gam(CPUE_Biomass ~ Month*AvgMax, data = Data_merge_Model)
summary(MR50)
AIC(MR50) #687.28
#For M50, jaunary, May and, June are significant. April is almost significant.
MR51 <- gam(CPUE_Biomass ~ Year.x+PropLogL3, data = Data_merge_Model)
summary(MR51)
AIC(MR51) #667.80
MR52 <- gam(CPUE_Biomass ~ Month+PropLogL3, data = Data_merge_Model)
summary(MR52)
AIC(MR52) #680.19
#February and June are signifcant. ProplogL3 is significant. Lots of months are almost signficant.
MR52.1 <- gam(CPUE_Biomass ~ PropLogL3, data = Data_merge_Model)
summary(MR52.1)
AIC(MR52.1) #667.80
MR53 <- gam(CPUE_Count ~ Month+PropLogL5, data = Data_merge_Model)
summary(MR53)
AIC(MR53) #378.06
#For MR53, April through November are sigifcant. ProplogL5 is also significant.
MR53.1 <- gam(CPUE_Biomass ~ Month+PropLogL5, data = Data_merge_Model)
summary(MR53.1)
AIC(MR53.1) #676.57
#For MR53.1, January and March through December are signifcant.
#PropLogL5 is signifcant.
MR54 <- gam(CPUE_Count ~ Year.x+PropLogL5, data = Data_merge_Model)
summary(MR54)
AIC(MR54) #362.37
MR55 <- gam(CPUE_Count ~ Year.x+PropLogG20, data = Data_merge_Model)
summary(MR55)
AIC(MR55) #357.18
MR56 <- gam(CPUE_Count ~ Month+PropLogG20, data = Data_merge_Model)
summary(MR56)
AIC(MR56) #377.63
#For MR56, January is significant as well as PropLogG20.
MR56.1 <- gam(CPUE_Biomass ~ Month+PropLogG20, data = Data_merge_Model)
summary(MR56.1)
AIC(MR56.1) #668.97
#For MR56.1, January is significant.
#####################
#Questions:
#When should use Year.x and Year.y?
#Any other models I should try?
#Read in table with Lat and Long in it for sites so you can make models for it.
SitesLoyalU <- read.csv("SitesLoyalU.csv")
#Now need to delete all columns besides lat and long so we can merge it.
SitesLoyalU3 <- SitesLoyalU[, -c(2,3,4)]
#Now merge Data_merge_Model with SitesLoaylU3
Data_merge_Model <- merge(Data_merge_Model, SitesLoyalU3, by = c("SiteCode"), all = FALSE)
#Now do more moeling to see if site lat and long is any good.
MR57 <- gam(Highest_Temperature_C ~ SiteLat+SiteLon, data = Data_merge_Model)
summary(MR57)
AIC(MR57) #321.92
MR58 <- gam(Highest_Temperature_C ~ SiteLat*SiteLon, data = Data_merge_Model)
summary(MR58)
AIC(MR58) #321.92
MR59 <- gam(Highest_Temperature_C~ SiteLat, data = Data_merge_Model)
summary(MR59)
AIC(MR59) #320.29
MR60 <- gam(Highest_Temperature_C~ SiteLon, data = Data_merge_Model)
summary(MR60)
AIC(MR60) #321.06
MR61 <- gam(Lowest_Temperature_C~ SiteLat+SiteLon, data = Data_merge_Model)
summary(MR61)
AIC(MR61) #321.88
MR62 <- gam(Lowest_Temperature_C~ SiteLat*SiteLon, data = Data_merge_Model)
summary(MR62)
AIC(MR62) #321.88
MR63 <- gam(Lowest_Temperature_C~ SiteLat, data = Data_merge_Model)
summary(MR63)
AIC(MR63) #320.04
MR64 <- gam(Lowest_Temperature_C~ SiteLon, data = Data_merge_Model)
summary(MR64)
AIC(MR64) #319.88
MR65 <- gam(AvgMin~ SiteLat*SiteLon, data = Data_merge_Model)
summary(MR65)
AIC(MR65) #318.13
MR66 <- gam(AvgMin~ SiteLat+SiteLon, data = Data_merge_Model)
summary(MR66)
AIC(MR66) #318.13
MR66 <- gam(AvgMin~ SiteLat, data = Data_merge_Model)
summary(MR66)
AIC(MR66) #316.38
MR67 <- gam(AvgMin~ SiteLon, data = Data_merge_Model)
summary(MR67)
AIC(MR67) #316.39
MR68 <- gam(AvgMax~ SiteLat+SiteLon, data = Data_merge_Model)
summary(MR68)
AIC(MR68) #322.00
MR69 <- gam(AvgMax~ SiteLat*SiteLon, data = Data_merge_Model)
summary(MR69)
AIC(MR69) #322.00
MR70 <- gam(AvgMax~ SiteLat, data = Data_merge_Model)
summary(MR70)
AIC(MR70) #322.29
MR71 <- gam(AvgMax~ SiteLon, data = Data_merge_Model)
summary(MR71)
AIC(MR71) #320.24
MR72 <- gam(PropLogL3~ SiteLat+SiteLon, data = Data_merge_Model)
summary(MR72)
AIC(MR72) #22.69
MR73 <- gam(PropLogL3~ SiteLat+SiteLon+Month, data = Data_merge_Model)
summary(MR73)
AIC(MR73) #-78.69
MR74 <- gam(PropLogL3~ SiteLat*SiteLon, data = Data_merge_Model)
summary(MR74)
AIC(MR74) #22.69
MR75 <- gam(PropLogL3~ SiteLat, data = Data_merge_Model)
summary(MR75)
AIC(MR75) #20.69
MR76 <- gam(PropLogL3~ SiteLon, data = Data_merge_Model)
summary(MR76)
AIC(MR76) #21.28
MR77 <- gam(PropLogL5~ SiteLat*SiteLon, data = Data_merge_Model)
summary(MR77)
AIC(MR77) #53.04
MR78 <- gam(PropLogL5~ SiteLat+SiteLon, data = Data_merge_Model)
summary(MR78)
AIC(MR78) #53.04
MR79 <- gam(PropLogL5~ SiteLat, data = Data_merge_Model)
summary(MR79)
AIC(MR79) #51.06
MR80 <- gam(PropLogL5~ SiteLon, data = Data_merge_Model)
summary(MR80)
AIC(MR80) #51.09
MR81 <- gam(PropLogG20~ SiteLat+SiteLon, data = Data_merge_Model)
summary(MR81)
AIC(MR81) #-623.42
#For MR81, Intercept and SiteLon are almost significant.
MR82 <- gam(PropLogL5~ SiteLat*SiteLon, data = Data_merge_Model)
summary(MR82)
AIC(MR82) #53.04
MR83 <- gam(PropLogL5~ SiteLat, data = Data_merge_Model)
summary(MR83)
AIC(MR83) #51.05
MR84 <- gam(PropLogL5~ SiteLon, data = Data_merge_Model)
summary(MR84)
AIC(MR84) #51.09
#Now we need to make plots
install.packages("ggplot2")
library(ggplot2)
#The first plot I will be making is looking at the Stream temp for 2020 and 2021. We need to use the ST data set for this.
#We also need to filter the ST data set for the five sites in the reduced data and years 2020 and 2021.
STPlot <- filter(ST,
(SiteCode == "Dry.Hoagland" & (Year == "2020" | Year == "2021")) |
(SiteCode == "Grandad.Hessler" & (Year == "2020" | Year == "2021")) |
(SiteCode == "Painter.LittleBear" & (Year == "2020" | Year == "2021")) |
(SiteCode == "Sherman.Loyalsock" & (Year == "2020" | Year == "2021")) |
(SiteCode == "Red.LittleBear" & (Year == "2020" | Year == "2021"))
)
STPlot1 <- filter(ST,
(SiteCode == "Dry.Hoagland" & (Year == "2020" | Year == "2021")) |
(SiteCode == "Grandad.Hessler" & (Year == "2020" | Year == "2021")) |
(SiteCode == "Painter.LittleBear" & (Year == "2020" | Year == "2021")) |
(SiteCode == "Red.LittleBear" & (Year == "2020" | Year == "2021"))
)
install.packages("dplyr")
install.packages("lubridate")
install.packages("mgcv")
install.packages("ggplot2")
install.packages("lubridate")
install.packages("mgcv")
install.packages("ggplot2")
ggplot(STPlot, aes(x = Year, y = Temp_C)) +
geom_line()
ggplot(STPlot, aes(x = Year, y = Temp_C, color = SiteCode)) +
geom_line() +
labs(x = "Year", y = "Temperature (째C)", color = "Site") +
theme_minimal()
ggplot(STPlot, aes(x = Date, y = Temp_C, color = SiteCode)) +
geom_line() +
labs(x = "Date", y = "Temperature (째C)", color = "Site") +
theme_minimal()
site_colors <- c("Dry.Hoagland" = "gray1", "Grandad.Hessler" = "blue", "Painter.LittleBear" = "forestgreen", "Sherman.Loyalsock" = "firebrick", "Red.LittleBear" = "slateblue2")
ggplot(STPlot, aes(x = Date, y = Temp_C, color = SiteCode)) +
geom_line() +
scale_color_manual(values = site_colors) +  # Apply custom color palette
labs(x = "Date", y = "Temperature (째C)", color = "Site") +
theme_minimal()
# Define site colors
site_colors <- c("Dry.Hoagland" = "gray1", "Grandad.Hessler" = "blue", "Painter.LittleBear" = "forestgreen", "Sherman.Loyalsock" = "firebrick", "Red.LittleBear" = "slateblue2")
#Fore some reason this second one works after I flipped firebrick to sheman and slateblue2 to red, even though thats backwords to what should be working...idk it worked at least :).
site_colors <- c("Dry.Hoagland" = "gray1", "Grandad.Hessler" = "blue", "Painter.LittleBear" = "forestgreen", "Sherman.Loyalsock" = "slateblue2", "Red.LittleBear" = "firebrick")
# Filter for 2020 and 2021 <7 so you can get sherman to stop going into 2022 when other data doesn't
STPlot_2020_2021 <- filter(STPlot, (year(Date) == 2020) | (year(Date) == 2021 & month(Date) < 7))
# Create an empty plot
p <- ggplot(STPlot_2020_2021, aes(x = Date, y = Temp_C, color = SiteCode)) +
geom_line() +
scale_color_manual(values = site_colors) +  # Apply custom color palette
labs(x = "Date", y = "Temperature (째C)", color = "Site") +
theme_minimal() +
theme(legend.key.size = unit(2, "lines"))  # Adjust the legend key size
# Loop through each site and gradually add lines one at a time
for (i in 1:length(unique(STPlot_2020_2021$SiteCode))) {
# Subset the data up to the current site
sub_data <- subset(STPlot_2020_2021, SiteCode %in% unique(STPlot_2020_2021$SiteCode)[1:i])
# Create a color vector
color_values <- rep(NA, length(unique(STPlot_2020_2021$SiteCode)))
color_values[1:i] <- site_colors[1:i]
# Add a line for the current site
p <- p +
geom_line(data = sub_data, aes(x = Date, y = Temp_C, color = SiteCode)) +
scale_color_manual(values = color_values, na.value = "transparent")  # Use colors up to the current site
# Display the plot
print(p)
}
# Loop through each site and gradually add lines one at a time
for (i in 1:length(unique(STPlot_2020_2021$SiteCode))) {
# Subset the data up to the current site
sub_data <- subset(STPlot_2020_2021, SiteCode %in% unique(STPlot_2020_2021$SiteCode)[1:i])
# Create a color vector
color_values <- rep(NA, length(unique(STPlot_2020_2021$SiteCode)))
color_values[1:i] <- site_colors[1:i]
# Add a line for the current site
p <- p +
geom_line(data = sub_data, aes(x = Date, y = Temp_C, color = SiteCode)) +
scale_color_manual(values = color_values, na.value = "transparent")  # Use colors up to the current site
# Display the plot
print(p)
}
#Fore some reason this second one works after I flipped firebrick to sheman and slateblue2 to red, even though thats backwords to what should be working...idk it worked at least :).
site_colors <- c("Dry.Hoagland" = "gray1", "Grandad.Hessler" = "blue", "Painter.LittleBear" = "forestgreen", "Sherman.Loyalsock" = "lightcoral", "Red.LittleBear" = "firebrick")
# Filter for 2020 and 2021 <7 so you can get sherman to stop going into 2022 when other data doesn't
STPlot_2020_2021 <- filter(STPlot, (year(Date) == 2020) | (year(Date) == 2021 & month(Date) < 7))
# Create an empty plot
p <- ggplot(STPlot_2020_2021, aes(x = Date, y = Temp_C, color = SiteCode)) +
geom_line() +
scale_color_manual(values = site_colors) +  # Apply custom color palette
labs(x = "Date", y = "Temperature (째C)", color = "Site") +
theme_minimal() +
theme(legend.key.size = unit(2, "lines"))  # Adjust the legend key size
# Loop through each site and gradually add lines one at a time
for (i in 1:length(unique(STPlot_2020_2021$SiteCode))) {
# Subset the data up to the current site
sub_data <- subset(STPlot_2020_2021, SiteCode %in% unique(STPlot_2020_2021$SiteCode)[1:i])
# Create a color vector
color_values <- rep(NA, length(unique(STPlot_2020_2021$SiteCode)))
color_values[1:i] <- site_colors[1:i]
# Add a line for the current site
p <- p +
geom_line(data = sub_data, aes(x = Date, y = Temp_C, color = SiteCode)) +
scale_color_manual(values = color_values, na.value = "transparent")  # Use colors up to the current site
# Display the plot
print(p)
}
#Fore some reason this second one works after I flipped firebrick to sheman and slateblue2 to red, even though thats backwords to what should be working...idk it worked at least :).
site_colors <- c("Dry.Hoagland" = "gray1", "Grandad.Hessler" = "blue", "Painter.LittleBear" = "forestgreen", "Sherman.Loyalsock" = "lightblue4", "Red.LittleBear" = "firebrick")
# Filter for 2020 and 2021 <7 so you can get sherman to stop going into 2022 when other data doesn't
STPlot_2020_2021 <- filter(STPlot, (year(Date) == 2020) | (year(Date) == 2021 & month(Date) < 7))
# Create an empty plot
p <- ggplot(STPlot_2020_2021, aes(x = Date, y = Temp_C, color = SiteCode)) +
geom_line() +
scale_color_manual(values = site_colors) +  # Apply custom color palette
labs(x = "Date", y = "Temperature (째C)", color = "Site") +
theme_minimal() +
theme(legend.key.size = unit(2, "lines"))  # Adjust the legend key size
# Loop through each site and gradually add lines one at a time
for (i in 1:length(unique(STPlot_2020_2021$SiteCode))) {
# Subset the data up to the current site
sub_data <- subset(STPlot_2020_2021, SiteCode %in% unique(STPlot_2020_2021$SiteCode)[1:i])
# Create a color vector
color_values <- rep(NA, length(unique(STPlot_2020_2021$SiteCode)))
color_values[1:i] <- site_colors[1:i]
# Add a line for the current site
p <- p +
geom_line(data = sub_data, aes(x = Date, y = Temp_C, color = SiteCode)) +
scale_color_manual(values = color_values, na.value = "transparent")  # Use colors up to the current site
# Display the plot
print(p)
}
#Fore some reason this second one works after I flipped firebrick to sheman and slateblue2 to red, even though thats backwords to what should be working...idk it worked at least :).
site_colors <- c("Dry.Hoagland" = "gray1", "Grandad.Hessler" = "blue", "Painter.LittleBear" = "forestgreen", "Sherman.Loyalsock" = "darkorchid4", "Red.LittleBear" = "firebrick")
# Filter for 2020 and 2021 <7 so you can get sherman to stop going into 2022 when other data doesn't
STPlot_2020_2021 <- filter(STPlot, (year(Date) == 2020) | (year(Date) == 2021 & month(Date) < 7))
# Create an empty plot
p <- ggplot(STPlot_2020_2021, aes(x = Date, y = Temp_C, color = SiteCode)) +
geom_line() +
scale_color_manual(values = site_colors) +  # Apply custom color palette
labs(x = "Date", y = "Temperature (째C)", color = "Site") +
theme_minimal() +
theme(legend.key.size = unit(2, "lines"))  # Adjust the legend key size
# Loop through each site and gradually add lines one at a time
for (i in 1:length(unique(STPlot_2020_2021$SiteCode))) {
# Subset the data up to the current site
sub_data <- subset(STPlot_2020_2021, SiteCode %in% unique(STPlot_2020_2021$SiteCode)[1:i])
# Create a color vector
color_values <- rep(NA, length(unique(STPlot_2020_2021$SiteCode)))
color_values[1:i] <- site_colors[1:i]
# Add a line for the current site
p <- p +
geom_line(data = sub_data, aes(x = Date, y = Temp_C, color = SiteCode)) +
scale_color_manual(values = color_values, na.value = "transparent")  # Use colors up to the current site
# Display the plot
print(p)
}
#Fore some reason this second one works after I flipped firebrick to sheman and slateblue2 to red, even though thats backwords to what should be working...idk it worked at least :).
site_colors <- c("Dry.Hoagland" = "gray1", "Grandad.Hessler" = "blue", "Painter.LittleBear" = "forestgreen", "Sherman.Loyalsock" = "gold1", "Red.LittleBear" = "firebrick")
# Filter for 2020 and 2021 <7 so you can get sherman to stop going into 2022 when other data doesn't
STPlot_2020_2021 <- filter(STPlot, (year(Date) == 2020) | (year(Date) == 2021 & month(Date) < 7))
# Create an empty plot
p <- ggplot(STPlot_2020_2021, aes(x = Date, y = Temp_C, color = SiteCode)) +
geom_line() +
scale_color_manual(values = site_colors) +  # Apply custom color palette
labs(x = "Date", y = "Temperature (째C)", color = "Site") +
theme_minimal() +
theme(legend.key.size = unit(2, "lines"))  # Adjust the legend key size
# Loop through each site and gradually add lines one at a time
for (i in 1:length(unique(STPlot_2020_2021$SiteCode))) {
# Subset the data up to the current site
sub_data <- subset(STPlot_2020_2021, SiteCode %in% unique(STPlot_2020_2021$SiteCode)[1:i])
# Create a color vector
color_values <- rep(NA, length(unique(STPlot_2020_2021$SiteCode)))
color_values[1:i] <- site_colors[1:i]
# Add a line for the current site
p <- p +
geom_line(data = sub_data, aes(x = Date, y = Temp_C, color = SiteCode)) +
scale_color_manual(values = color_values, na.value = "transparent")  # Use colors up to the current site
# Display the plot
print(p)
}
#Fore some reason this second one works after I flipped firebrick to sheman and slateblue2 to red, even though thats backwords to what should be working...idk it worked at least :).
site_colors <- c("Dry.Hoagland" = "gray1", "Grandad.Hessler" = "blue", "Painter.LittleBear" = "forestgreen", "Sherman.Loyalsock" = "darkorange2", "Red.LittleBear" = "firebrick")
# Filter for 2020 and 2021 <7 so you can get sherman to stop going into 2022 when other data doesn't
STPlot_2020_2021 <- filter(STPlot, (year(Date) == 2020) | (year(Date) == 2021 & month(Date) < 7))
# Create an empty plot
p <- ggplot(STPlot_2020_2021, aes(x = Date, y = Temp_C, color = SiteCode)) +
geom_line() +
scale_color_manual(values = site_colors) +  # Apply custom color palette
labs(x = "Date", y = "Temperature (째C)", color = "Site") +
theme_minimal() +
theme(legend.key.size = unit(2, "lines"))  # Adjust the legend key size
# Loop through each site and gradually add lines one at a time
for (i in 1:length(unique(STPlot_2020_2021$SiteCode))) {
# Subset the data up to the current site
sub_data <- subset(STPlot_2020_2021, SiteCode %in% unique(STPlot_2020_2021$SiteCode)[1:i])
# Create a color vector
color_values <- rep(NA, length(unique(STPlot_2020_2021$SiteCode)))
color_values[1:i] <- site_colors[1:i]
# Add a line for the current site
p <- p +
geom_line(data = sub_data, aes(x = Date, y = Temp_C, color = SiteCode)) +
scale_color_manual(values = color_values, na.value = "transparent")  # Use colors up to the current site
# Display the plot
print(p)
}
#Fore some reason this second one works after I flipped firebrick to sheman and slateblue2 to red, even though thats backwords to what should be working...idk it worked at least :).
site_colors <- c("Dry.Hoagland" = "gray1", "Grandad.Hessler" = "blue", "Painter.LittleBear" = "forestgreen", "Sherman.Loyalsock" = "darkorange3", "Red.LittleBear" = "firebrick")
# Filter for 2020 and 2021 <7 so you can get sherman to stop going into 2022 when other data doesn't
STPlot_2020_2021 <- filter(STPlot, (year(Date) == 2020) | (year(Date) == 2021 & month(Date) < 7))
# Create an empty plot
p <- ggplot(STPlot_2020_2021, aes(x = Date, y = Temp_C, color = SiteCode)) +
geom_line() +
scale_color_manual(values = site_colors) +  # Apply custom color palette
labs(x = "Date", y = "Temperature (째C)", color = "Site") +
theme_minimal() +
theme(legend.key.size = unit(2, "lines"))  # Adjust the legend key size
# Loop through each site and gradually add lines one at a time
for (i in 1:length(unique(STPlot_2020_2021$SiteCode))) {
# Subset the data up to the current site
sub_data <- subset(STPlot_2020_2021, SiteCode %in% unique(STPlot_2020_2021$SiteCode)[1:i])
# Create a color vector
color_values <- rep(NA, length(unique(STPlot_2020_2021$SiteCode)))
color_values[1:i] <- site_colors[1:i]
# Add a line for the current site
p <- p +
geom_line(data = sub_data, aes(x = Date, y = Temp_C, color = SiteCode)) +
scale_color_manual(values = color_values, na.value = "transparent")  # Use colors up to the current site
# Display the plot
print(p)
}
#Fore some reason this second one works after I flipped firebrick to sheman and slateblue2 to red, even though thats backwords to what should be working...idk it worked at least :).
site_colors <- c("Dry.Hoagland" = "gray1", "Grandad.Hessler" = "blue", "Painter.LittleBear" = "forestgreen", "Sherman.Loyalsock" = "darkorange2", "Red.LittleBear" = "firebrick")
# Filter for 2020 and 2021 <7 so you can get sherman to stop going into 2022 when other data doesn't
STPlot_2020_2021 <- filter(STPlot, (year(Date) == 2020) | (year(Date) == 2021 & month(Date) < 7))
# Create an empty plot
p <- ggplot(STPlot_2020_2021, aes(x = Date, y = Temp_C, color = SiteCode)) +
geom_line() +
scale_color_manual(values = site_colors) +  # Apply custom color palette
labs(x = "Date", y = "Temperature (째C)", color = "Site") +
theme_minimal() +
theme(legend.key.size = unit(2, "lines"))  # Adjust the legend key size
# Loop through each site and gradually add lines one at a time
for (i in 1:length(unique(STPlot_2020_2021$SiteCode))) {
# Subset the data up to the current site
sub_data <- subset(STPlot_2020_2021, SiteCode %in% unique(STPlot_2020_2021$SiteCode)[1:i])
# Create a color vector
color_values <- rep(NA, length(unique(STPlot_2020_2021$SiteCode)))
color_values[1:i] <- site_colors[1:i]
# Add a line for the current site
p <- p +
geom_line(data = sub_data, aes(x = Date, y = Temp_C, color = SiteCode)) +
scale_color_manual(values = color_values, na.value = "transparent")  # Use colors up to the current site
# Display the plot
print(p)
}
Data_merge_Model %>%
mutate(MP8 = predict.gam(MR8))  %>%
ggplot() +
geom_point(aes(Lowest_Temperature_C, CPUE_Count, color = Month)) +
geom_line(aes(Lowest_Temperature_C, MP8))
Data_merge_Model %>%
mutate(MP8 = predict.gam(MR8))  %>%
ggplot() +
geom_point(aes(Lowest_Temperature_C, CPUE_Count, color = Month)) +
geom_smooth(aes(Lowest_Temperature_C, MP8))
?shape
Data_merge_Model %>%
mutate(MP8 = predict.gam(MR8))  %>%
ggplot() +
geom_point(aes(Lowest_Temperature_C, CPUE_Count, color = Month)) +
geom_smooth(aes(Lowest_Temperature_C, MP8))
#MP11
?shape
?points
Data_merge_Model %>%
mutate(MP8 = predict.gam(MR8)) %>%
ggplot() +
geom_point(aes(Lowest_Temperature_C, CPUE_Count, color = Month, shape = Month)) +
geom_smooth(aes(Lowest_Temperature_C, MP8)) +
scale_shape_manual(values = c("January" = 17, "February" = 17, "March" = 15, "April" = 15,
"May" = 15, "June" = 16, "July" = 16, "August" = 16,
"September" = 15, "October" = 15, "November" = 15, "December" = 17))
Data_merge_Model %>%
mutate(MP8 = predict.gam(MR8)) %>%
ggplot() +
geom_point(aes(Lowest_Temperature_C, CPUE_Count, color = Month, shape = Month)) +
geom_smooth(aes(Lowest_Temperature_C, MP8)) +
scale_shape_manual(values = c("January" = 17, "February" = 17, "March" = 15, "April" = 15,
"May" = 15, "June" = 16, "July" = 16, "August" = 16,
"September" = 15, "October" = 15, "November" = 15, "December" = 17))
# Check the levels of the Month variable in your data
levels(Data_merge_Model$Month)
# Make sure the levels in scale_shape_manual match with the levels in your data
Data_merge_Model %>%
mutate(MP8 = predict.gam(MR8)) %>%
ggplot() +
geom_point(aes(Lowest_Temperature_C, CPUE_Count, color = Month, shape = Month)) +
geom_smooth(aes(Lowest_Temperature_C, MP8)) +
scale_shape_manual(values = c("January" = 17, "February" = 17, "March" = 15, "April" = 15,
"May" = 15, "June" = 16, "July" = 16, "August" = 16,
"September" = 15, "October" = 15, "November" = 15, "December" = 17))
Data_merge_Model %>%
mutate(MP8 = predict.gam(MR8)) %>%
ggplot() +
geom_point(aes(Lowest_Temperature_C, CPUE_Count, color = Month, shape = Month)) +
geom_smooth(aes(Lowest_Temperature_C, MP8)) +
scale_shape_manual(values = c("01" = 17, "02" = 17, "03" = 15, "04" = 15,
"05" = 15, "06" = 16, "07" = 16, "08" = 16,
"09" = 15, "10" = 15, "11" = 15, "12" = 17))
Data_merge_Model %>%
mutate(MP8 = predict.gam(MR8)) %>%
ggplot() +
geom_point(aes(Lowest_Temperature_C, CPUE_Count, color = Month, shape = Month), size = 3) + # Adjust the size as needed
geom_smooth(aes(Lowest_Temperature_C, MP8)) +
scale_shape_manual(values = c("January" = 17, "February" = 17, "March" = 15, "April" = 15,
"May" = 15, "June" = 16, "July" = 16, "August" = 16,
"September" = 15, "October" = 15, "November" = 15, "December" = 17))
Data_merge_Model %>%
mutate(MP8 = predict.gam(MR8)) %>%
ggplot() +
geom_point(aes(Lowest_Temperature_C, CPUE_Count, color = Month, shape = Month), size = 3) +
geom_smooth(aes(Lowest_Temperature_C, MP8)) +
scale_shape_manual(values = c("01" = 17, "02" = 17, "03" = 15, "04" = 15,
"05" = 15, "06" = 16, "07" = 16, "08" = 16,
"09" = 15, "10" = 15, "11" = 15, "12" = 17))
Data_merge_Model %>%
mutate(MP8 = predict.gam(MR8)) %>%
ggplot() +
geom_point(aes(Lowest_Temperature_C, CPUE_Count, color = Month, shape = Month), size = 1) +
geom_smooth(aes(Lowest_Temperature_C, MP8)) +
scale_shape_manual(values = c("01" = 17, "02" = 17, "03" = 15, "04" = 15,
"05" = 15, "06" = 16, "07" = 16, "08" = 16,
"09" = 15, "10" = 15, "11" = 15, "12" = 17))
Data_merge_Model %>%
mutate(MP8 = predict.gam(MR8)) %>%
ggplot() +
geom_point(aes(Lowest_Temperature_C, CPUE_Count, color = Month, shape = Month), size = 2) +
geom_smooth(aes(Lowest_Temperature_C, MP8)) +
scale_shape_manual(values = c("01" = 17, "02" = 17, "03" = 15, "04" = 15,
"05" = 15, "06" = 16, "07" = 16, "08" = 16,
"09" = 15, "10" = 15, "11" = 15, "12" = 17))
