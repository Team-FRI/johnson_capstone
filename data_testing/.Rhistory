mutate(Year=year(Painter_LT_Updated$DateTime))
summary(Painter_LT_YM)
Painter_ST_YM <- Painter_ST_Updated %>%
mutate(Year=year(Painter_ST_Updated$DateTime))
summary(Painter_ST_YM)
#Need to combine Year and Month columns to be one column formatted as [YYYY-MM].
#Will need ot use the unite function. To do that, install tidyr package.
install.packages("tidyr")
library(tidyr)
#Now try uniting Year and Month Columns.
#For Land temp:
Painter_LT_Master <- Painter_LT_YM %>%
unite(YearMonth, Year, Month, sep = "-")
#For Stream temp:
Painter_ST_Master <- Painter_ST_YM %>%
unite(YearMonth, Year, Month, sep = "-")
install.packages("zoo")
library("zoo")
View(Painter_ST_Master)
summary(Painter_LT_Updated)
View(Painter_LT)
Painter_LT$YearMonth <- format(as.Date(Painter_LT$DateTime), "%Y-%m")
View(Painter_LT)
summary(Painter_LT)
#Set working directory
setwd("C:/GitHub/johnson_capstone/data_testing")
getwd()
dir()
#All 3 excell files I'm going to read in are CSV's.
Painter_LT <- read.csv("Painter_Land_X_QC.csv")
Painter_ST00 <- read.csv("Painter_Stream_X_QC.csv")
Painter_ST01 <- read.csv("Painter_Stream0_X_QC.csv")
#The problem is the stream temperature data is split up into two data sets, and I want them as 1 data set.
#So lets merge the two.
Painter_ST <- merge(Painter_ST00, Painter_ST01, all = TRUE)
#To arrange dates in right order, install dplyr package.
install.packages("dplyr")
library(dplyr)
#Now to arrange dates in right order:
Painter_ST <- arrange(Painter_ST, DateTime)
#Before I try to compare fish and temperature together, I want to just look at temperature alone first.
#But first we need to format that date and time. To do that, lets install the luberdate package.
install.packages("lubridate")
library("lubridate")
#Now need to get R to reed this as a year date and time rather than a string of numbers.
class(Painter_LT$DateTime)
class(Painter_ST$DateTime)
#It's eneterd as a character, so need to change it to POSIXct
#First do land temp
Painter_LT$DateTime <- as.POSIXct(Painter_LT$DateTime)
class(Painter_LT$DateTime)
summary(Painter_LT)
install.packages("dplyr")
install.packages("lubridate")
Painter_ST$DateTime <- as.POSIXct(Painter_ST$DateTime)
class(Painter_ST$DateTime)
summary(Painter_ST)
Painter_LT$YearMonth <- format(as.Date(Painter_LT$DateTime), "%Y-%m")
summary(Painter_LT)
Painter_ST$YearMonth <- format(as.Date(Painter_ST$DateTime), "%Y-%m")
summary(Painter_ST)
View(Painter_ST)
Painter_Stream_Summary <- Painter_ST %>%
select(YearMonth, Temp_C) %>%
group_by(YearMonth) %>%
arrange(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C))
View(Painter_Stream_Summary)
Painter_Land_Summary <- Painter_LT %>%
select(YearMonth, Temp_C) %>%
group_by(YearMonth) %>%
arrange(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C))
View(Painter_Land_Summary)
install.packages("readxl")
library(readxl)
Painter_FishRec_BT <- read_excel ("Painter_FishRecords_BrookTrout")
install.packages("readxl")
library(readxl)
Painter_FishRec_BT <- read_excel ("Painter_FishRecords_BrookTrout.xlsx")
View(Painter_FishRec_BT)
install.packages("ggplot2")
library("ggplot2")
DataForExamplePlot_BRT <- Painter_FishRec_BT %>%
select(ID, Date, Species, EventCode) %>%
filter(Date > ymd("2018-01-01"))
install.packages("lubridate")
library("lubridate")
install.packages("lubridate")
DataForExamplePlot_BRT <- Painter_FishRec_BT %>%
select(ID, Date, Species, EventCode) %>%
filter(Date > ymd("2018-01-01"))
install.packages("tidyr")
library(tidyr)
library("tidyr")
DataForExamplePlot_BRT <- Painter_FishRec_BT %>%
select(ID, Date, Species, EventCode) %>%
filter(Date > ymd("2018-01-01"))
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
DataForExamplePlot_BRT <- Painter_FishRec_BT %>%
select(ID, Date, Species, EventCode) %>%
filter(Date > ymd("2018-01-01"))
View(DataForExamplePlot_BRT)
Summary_Plot_BRTData <- DataForExamplePlot_BRT %>%
group_by(Date) %>%
summarise(count = length(Species))
View(Summary_Plot_BRTData)
Summary_Plot_BRTData <- DataForExamplePlot_BRT %>%
group_by(Date) %>%
summarise(Count = length(Species))
View(Painter_LT_Master)
View(Painter_Land_Summary)
View(Painter_Stream_Summary)
View(Summary_Plot_BRTData)
geom_smooth(Painter_Land_Summary$AvgYearMonthTemp) +
geom_smooth(Painter_Stream_Summary$AvgYearMonthTemp)
geom_smooth(Painter_Land_Summary$AvgYearMonthTemp) +
geom_smooth(Painter_Stream_Summary$AvgYearMonthTemp)
ggplot(data = Painter_Land_Summary) +
geom_smooth(mapping = aes(x = AvgYearMonthTemp))
ggplot(data = Painter_Land_Summary) +
geom_smooth(mapping = aes(x = AvgYearMonthTemp, Y = AvgYearMonthTemp))
View(Summary_Plot_BRTData)
geom_smooth(mapping = aes(y = Painter_Land_Summary)) +
geom_smooth(mapping = aes(y = Painter_Stream_Summary)) +
scale_y_continuous()
geom_smooth(mapping = aes(y = Painter_Land_Summary)) +
geom_smooth(mapping = aes(y = Painter_Stream_Summary)) +
scale_y_continuous
Ft_plot <- Painter_Land_Summary %>%
ggplot(aes(x = YearMonth, y = AvgYearMonthTemp)) +
geom_smooth(color = "brown")
View(Ft_plot)
View(Ft_plot)
#Set working directory
setwd("C:/GitHub/johnson_capstone/data_testing")
getwd()
dir()
#3 of 4 excell files I'm going to read in are CSV's.
Painter_LT <- read.csv("Painter_Land_X_QC.csv")
Painter_ST00 <- read.csv("Painter_Stream_X_QC.csv")
Painter_ST01 <- read.csv("Painter_Stream0_X_QC.csv")
#The Fish records file from Painter Stream is an .xslx, so need to download readxl package.
install.packages("readxl")
library(readxl)
Painter_FishRec_BT <- read_excel ("Painter_FishRecords_BrookTrout.xlsx")
#The problem is the stream temperature data is split up into two data sets, and I want them as 1 data set.
#So lets merge the two.
Painter_ST <- merge(Painter_ST00, Painter_ST01, all = TRUE)
#To arrange dates in right order, install dplyr package.
install.packages("dplyr")
library(dplyr)
#Now to arrange dates in right order:
Painter_ST <- arrange(Painter_ST, DateTime)
#Before I try to compare fish and temperature together, I want to just look at temperature alone first.
#But first we need to format that date and time. To do that, lets install the luberdate package.
install.packages("lubridate")
library("lubridate")
#Now need to get R to reed this as a year date and time rather than a string of numbers.
class(Painter_LT$DateTime)
class(Painter_ST$DateTime)
#It's eneterd as a character, so need to change it to POSIXct
#First do land temp
Painter_LT$DateTime <- as.POSIXct(Painter_LT$DateTime)
class(Painter_LT$DateTime)
summary(Painter_LT)
#Do same thing for stream temp
Painter_ST$DateTime <- as.POSIXct(Painter_ST$DateTime)
class(Painter_ST$DateTime)
summary(Painter_ST)
#Now that its in the proper format, have to extract month as an individual column.
#In order to do this we need to use the muate function, which is in the dplyr package, which is already installed...
#First do land temp
Painter_LT$YearMonth <- format(as.Date(Painter_LT$DateTime), "%Y-%m")
summary(Painter_LT)
#Now do stream temp
Painter_ST$YearMonth <- format(as.Date(Painter_ST$DateTime), "%Y-%m")
summary(Painter_ST)
Painter_Stream_Summary <- Painter_ST %>%
select(YearMonth, Temp_C) %>%
group_by(YearMonth) %>%
arrange(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C))
Painter_Land_Summary <- Painter_LT %>%
select(YearMonth, Temp_C) %>%
group_by(YearMonth) %>%
arrange(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C))
#Use Painter_Stream_Summary to make figure
#Use select the columns in the figure you want to use
#Filter selects rows
#So could select a site, and filter for Brook Trout
#Use plot of ggplot comes into play
#Do confident intervals.
#In order to plot figure you want, install gg pot 2 package.
install.packages("ggplot2")
library("ggplot2")
install.packages("tidyr")
library("tidyr")
DataForExamplePlot_BRT <- Painter_FishRec_BT %>%
select(ID, Date, Species, EventCode) %>%
filter(Date > ymd("2018-01-01"))
Summary_Plot_BRTData <- DataForExamplePlot_BRT %>%
group_by(Date) %>%
summarise(Count = length(Species))
install.packages("dplyr")
install.packages("dplyr")
FT_plot <- Painter_Stream_Summary %>%
ggplot(aes(x = YearMonth, y = AvgYearMonthTemp)) +
geom_smooth(color = "blue")
Painter_Stream_Summary %>%
ggplot(aes(x = YearMonth, y = AvgYearMonthTemp)) +
geom_smooth(color = "blue")
ggplot() +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(y = AvgYearMonthTemp))
ggplot() +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes( x = YearMonth, y = AvgYearMonthTemp))
ggplot() +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp)), color = "blue" +
ggplot() +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp)), color = "blue") +
ggplot() +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown")
ggplot() +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown")
ggplot() +
geom_smooth(Painter_Stream_Summary) +
geom_smooth(Painter_Land_Summary)
ggplot() +
geom_smooth(mapping = aes(Painter_Stream_Summary)) +
geom_smooth(mapping = aes(Painter_Land_Summary))
ggplot(Painter_Stream_Summary$AvgYearMonthTemp, aes(Painter_Stream_Summary$YearMonth))
View(Summary_Plot_BRTData)
geom_smooth(Painter_Land_Summary$AvgYearMonthTemp) +
geom_smooth(Painter_Stream_Summary$AvgYearMonthTemp)
ggplot(data = Painter_Land_Summary) +
geom_smooth(mapping = aes(x = AvgYearMonthTemp, Y = AvgYearMonthTemp))
ggplot(data = Painter_Land_Summary) +
geom_smooth(mapping = aes(x = YearMonth, y = AvgYearMonthTemp))
ggplot(data = Painter_Land_Summary) +
geom_smooth(mapping = aes(x = YearMonth, y = AvgYearMonthTemp))
Painter_Stream_Summary %>%
ggplot(aes(x = YearMonth, y = AvgYearMonthTemp)) +
geom_smooth(color = "blue")
ggplot() +
geom_point(data = data1, aes(x = clarity, y = m), color = "blue") +
geom_point(data = data2, aes(x = clarity, y = m))
ggplot() +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown")
ggplot +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown")
ggplot +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown")
ggplot() +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown")
ggplot() +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown")
ggplot +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown")
ggplot(
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown")
geom_point(date = Summary_Plot_BRTData, aes(x = Date, y = Count)))
ggplot(
ggplot(
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown")
ggplot()
ggplot()
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown") +
geom_point(date = Summary_Plot_BRTData, aes(x = Date, y = Count))
ggplot() +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown") +
geom_point(date = Summary_Plot_BRTData, aes(x = Date, y = Count))
ggplot() +
ggplot() +
geom_smooth(data = Painter_Stream_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "blue") +
geom_smooth(data = Painter_Land_Summary, aes(x = YearMonth, y = AvgYearMonthTemp), color = "brown") +
geom_point(date = Summary_Plot_BRTData, aes(x = Date, y = count)
Test <-
Test <-
#Make Stream Temperature and Land Temperature all one table so can make graph with two data sets
Painter_ST <- Painter_ST %>%
mutate(Type = "Air")
View(Painter_ST)
#Set working directory
setwd("C:/GitHub/johnson_capstone/data_testing")
getwd()
dir()
#3 of 4 excell files I'm going to read in are CSV's.
Painter_LT <- read.csv("Painter_Land_X_QC.csv")
Painter_ST00 <- read.csv("Painter_Stream_X_QC.csv")
Painter_ST01 <- read.csv("Painter_Stream0_X_QC.csv")
#The Fish records file from Painter Stream is an .xslx, so need to download readxl package.
install.packages("readxl")
library(readxl)
Painter_FishRec_BT <- read_excel ("Painter_FishRecords_BrookTrout.xlsx")
#The problem is the stream temperature data is split up into two data sets, and I want them as 1 data set.
#So lets merge the two.
Painter_ST <- merge(Painter_ST00, Painter_ST01, all = TRUE)
#To arrange dates in right order, install dplyr package.
install.packages("dplyr")
library(dplyr)
#Now to arrange dates in right order:
Painter_ST <- arrange(Painter_ST, DateTime)
#Before I try to compare fish and temperature together, I want to just look at temperature alone first.
#But first we need to format that date and time. To do that, lets install the luberdate package.
install.packages("lubridate")
library("lubridate")
#Now need to get R to reed this as a year date and time rather than a string of numbers.
class(Painter_LT$DateTime)
class(Painter_ST$DateTime)
#It's eneterd as a character, so need to change it to POSIXct
#First do land temp
Painter_LT$DateTime <- as.POSIXct(Painter_LT$DateTime)
class(Painter_LT$DateTime)
summary(Painter_LT)
#Do same thing for stream temp
Painter_ST$DateTime <- as.POSIXct(Painter_ST$DateTime)
class(Painter_ST$DateTime)
summary(Painter_ST)
#Now that its in the proper format, have to extract month as an individual column.
#In order to do this we need to use the muate function, which is in the dplyr package, which is already installed...
#First do land temp
Painter_LT$YearMonth <- format(as.Date(Painter_LT$DateTime), "%Y-%m")
summary(Painter_LT)
#Now do stream temp
Painter_ST$YearMonth <- format(as.Date(Painter_ST$DateTime), "%Y-%m")
summary(Painter_ST)
Painter_Stream_Summary <- Painter_ST %>%
select(YearMonth, Temp_C) %>%
group_by(YearMonth) %>%
arrange(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C))
Painter_Land_Summary <- Painter_LT %>%
select(YearMonth, Temp_C) %>%
group_by(YearMonth) %>%
arrange(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C))
#Use Painter_Stream_Summary to make figure
#Use select the columns in the figure you want to use
#Filter selects rows
#So could select a site, and filter for Brook Trout
#Use plot of ggplot comes into play
#Do confident intervals.
#In order to plot figure you want, install gg pot 2 package.
install.packages("ggplot2")
library("ggplot2")
install.packages("tidyr")
library("tidyr")
DataForExamplePlot_BRT <- Painter_FishRec_BT %>%
select(ID, Date, Species, EventCode) %>%
filter(Date > ymd("2018-01-01"))
Summary_Plot_BRTData <- DataForExamplePlot_BRT %>%
group_by(Date) %>%
summarise(Count = length(Species))
install.packages("lubridate")
install.packages("dplyr")
install.packages("readxl")
install.packages("lubridate")
install.packages("dplyr")
install.packages("readxl")
Test <-
#Make Stream Temperature and Land Temperature all one table so can make graph with two data sets
#For Land (now called air) Temp
Painter_LT <- Painter_LT %>%
mutate(Type = "Air")
#For Stream (now called water) Temp
Painter_ST <- Painter_ST %>%
mutate(Type = "Water")
View(Painter_LT)
View(Painter_ST)
Painter_Master_Temp <- bind_cols(Painter_LT, Painter_ST)
Painter_Master_Temp <- bind_rows(Painter_LT, Painter_ST)
View(Painter_Master_Temp)
#Set working directory
setwd("C:/GitHub/johnson_capstone/data_testing")
getwd()
dir()
#3 of 4 excell files I'm going to read in are CSV's.
Painter_LT <- read.csv("Painter_Land_X_QC.csv")
Painter_ST00 <- read.csv("Painter_Stream_X_QC.csv")
Painter_ST01 <- read.csv("Painter_Stream0_X_QC.csv")
#The Fish records file from Painter Stream is an .xslx, so need to download readxl package.
install.packages("readxl")
library(readxl)
Painter_FishRec_BT <- read_excel ("Painter_FishRecords_BrookTrout.xlsx")
#The problem is the stream temperature data is split up into two data sets, and I want them as 1 data set.
#So lets merge the two.
Painter_ST <- merge(Painter_ST00, Painter_ST01, all = TRUE)
#To arrange dates in right order, install dplyr package.
install.packages("dplyr")
library(dplyr)
#Now to arrange dates in right order:
Painter_ST <- arrange(Painter_ST, DateTime)
#Before I try to compare fish and temperature together, I want to just look at temperature alone first.
#But first we need to format that date and time. To do that, lets install the luberdate package.
install.packages("lubridate")
library("lubridate")
#Now need to get R to reed this as a year date and time rather than a string of numbers.
class(Painter_LT$DateTime)
class(Painter_ST$DateTime)
#It's eneterd as a character, so need to change it to POSIXct
#First do land temp
Painter_LT$DateTime <- as.POSIXct(Painter_LT$DateTime)
class(Painter_LT$DateTime)
summary(Painter_LT)
#Do same thing for stream temp
Painter_ST$DateTime <- as.POSIXct(Painter_ST$DateTime)
class(Painter_ST$DateTime)
summary(Painter_ST)
#Now that its in the proper format, have to extract month as an individual column.
#In order to do this we need to use the muate function, which is in the dplyr package, which is already installed...
#First do land temp
Painter_LT$YearMonth <- format(as.Date(Painter_LT$DateTime), "%Y-%m")
summary(Painter_LT)
#Now do stream temp
Painter_ST$YearMonth <- format(as.Date(Painter_ST$DateTime), "%Y-%m")
summary(Painter_ST)
Painter_Stream_Summary <- Painter_ST %>%
select(YearMonth, Temp_C) %>%
group_by(YearMonth) %>%
arrange(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C))
Painter_Land_Summary <- Painter_LT %>%
select(YearMonth, Temp_C) %>%
group_by(YearMonth) %>%
arrange(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C))
#Use Painter_Stream_Summary to make figure
#Use select the columns in the figure you want to use
#Filter selects rows
#So could select a site, and filter for Brook Trout
#Use plot of ggplot comes into play
#Do confident intervals.
#In order to plot figure you want, install gg pot 2 package.
install.packages("ggplot2")
library("ggplot2")
install.packages("tidyr")
library("tidyr")
DataForExamplePlot_BRT <- Painter_FishRec_BT %>%
select(ID, Date, Species, EventCode) %>%
filter(Date > ymd("2018-01-01"))
Summary_Plot_BRTData <- DataForExamplePlot_BRT %>%
group_by(Date) %>%
summarise(Count = length(Species))
install.packages("lubridate")
install.packages("dplyr")
install.packages("readxl")
install.packages("readxl")
install.packages("dplyr")
install.packages("lubridate")
install.packages("tidyr")
Painter_Land_Summary <- Painter_Land_Summary %>%
mutate(Type = "Air")
#For Stream (now called water) Temp
Painter_Stream_Summary <- Painter_Stream_Summary %>%
mutate(Type = "Water")
View(Painter_Land_Summary)
View(Painter_Stream_Summary)
Painter_Master_Temp <- bind_rows(Painter_Land_Summary, Painter_Stream_Summary)
View(Painter_Master_Temp)
ggplot() +
geom_smooth(data = Painter_Master_Temp, aes(x = YearMonth, Y = AvgYearMonthTemp) Water = "blue")
ggplot() +
geom_smooth(data = Painter_Master_Temp, aes(x = YearMonth, Y = AvgYearMonthTemp) Type = Water)
ggplot() +
geom_smooth(data = Painter_Master_Temp$Type = "Air", aes(x = YearMonth, Y = AvgYearMonthTemp) Type = Water) +
geom_smooth(data = Painter_Master_Temp$Type "Air", aes(x = YearMonth, Y = AvgYearMonthTemp) Type = Water) +
Painter_Master_Temp %>%
Painter_Master_Temp %>%
filter(Type("Air")) %>%
geom_smooth(aes(x = Type, y = AvgYearMonthTemp)
Painter_Master_Temp %>%
Painter_Master_Temp %>%
filter(Type("Air")) %>%
geom_smooth(aes(x = Type, y = AvgYearMonthTemp))
Painter_Master_Temp %>%
filter(Type("Air")) %>%
geom_smooth(aes(x = Type, y = AvgYearMonthTemp))
print(Painter_Master_Temp)
View(Painter_ST)
View(Painter_Master_Temp)
Painter_Master_Temp %>%
filter(Type %in% ("Air")) %>%
geom_smooth(aes(x = Type, y = AvgYearMonthTemp))
Painter_Master_Temp %>%
filter(Type %in% ("Air")) %>%
geom_smooth(mapping = aes(x = Type, y = AvgYearMonthTemp))
print(Painter_Master_Temp)
Painter_Master_Temp %>%
filter(Type %in% ("Air")) %>%
geom_smooth(mapping = aes(x = Type, y = AvgYearMonthTemp))
plot(Painter_Master_Temp)
Painter_Master_Temp %>%
filter(Type %in% ("Air")) %>%
print(geom_smooth(mapping = aes(x = Type, y = AvgYearMonthTemp)))
Painter_Master_Temp %>%
print(geom_smooth(mapping = aes(x = Type, y = AvgYearMonthTemp))
