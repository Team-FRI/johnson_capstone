install.packages("dplyr")
install.packages("lubridate")
install.packages("lubridate")
View(Brunnerdale_Land_Temp_Updated)
#Now do stream temp
Brunnerdale_Stream_Temp_Updated <- Brunnerdale_Stream_Temp %>%
mutate(Month=month(Brunnerdale_Stream_Temp$DateTime, label = TRUE))
summary(Brunnerdale_Stream_Temp_Updated)
View(Brunnerdale_Stream_Temp_Updated)
#Bellow seemed to work to get year as a column
Brunnerdale_Land_Temp_Updated1 <- Brunnerdale_Land_Temp %>%
mutate(Year=year(Brunnerdale_Land_Temp$DateTime))
View(Brunnerdale_Land_Temp_Updated1)
#Bellow seemed to work to get year as a column
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(Year=year(Brunnerdale_Land_Temp$DateTime))
View(Brunnerdale_Land_Temp_Updated1)
View(Brunnerdale_Land_Temp_Updated)
View(Brunnerdale_Land_Temp)
summary(Brunnerdale_Land_Temp_Updated1)
#Set working directory
setwd("C:/GitHub/johnson_capstone/data_testing")
getwd()
dir()
#First we will need to download the readxl package since one out of the three data sets is a .xlsx
install.packages("readxl")
library(readxl)
#So now I will read in the .xlsx file "Data.xlsx"
Brunnerdale.ogdonia_FishRecords <- read_excel("Brunnerdale.ogdonia_FishRecords.xlsx")
#Beware that using the read_excel function turns the data into a "tibble format".
#In order to fix this, I need to do the as.data.frame function
Brunnerdale.ogdonia_FishRecords1 <- as.data.frame(Brunnerdale.ogdonia_FishRecords)
#This other 2 datasets we need to read in are not excell files, their CSV's.
#Read in water temp data for Long term Loyalsock Project at the Brunnerdale location.
Brunnerdale_Stream_Temp <- read.csv("Brunnerdale_Run_Stream_X_QC.csv")
Brunnerdale_Land_Temp <- read.csv("Brunnerdale_Run_Land_X_QC.csv")
#Now that both CSV's are red in, we need  a unique identifier that brings the two data sets together.
#Luckily, both the temperature and fish data was taken in the same location (Brunnerdale Run at Ogdonia).
#However, these are not currency columns in the data tables, so I need to add a column.
#So lets add the column "Site Name" consiting of "Brunnerdale.ogdonia" to the Brunndedale stream and air temp tables
Brunnerdale_Stream_Temp$Site_Name <- "Brunnerdale.ogdonia"
Brunnerdale_Land_Temp$Site_Name <- "Brunnerdale.ogdonia"
#Now also add the column "Site Name" consiting of "Brunnerdale.ogdonia" to the Brunnerdale.ogdonia_FishRecords1 fish records data set
Brunnerdale.ogdonia_FishRecords1$Site_Name <- "Brunnerdale.ogdonia"
#In order to bring the 3 datasets together I will need to R bind, but first I will need to remove the columns from the Brunnerdale_Fish_Records_1 file that I don't want to use to have the same number of columns as Brunnerdale_Stream_Temp
# See above lines and edit columns taken out bellow ^??????
Brunnerdale.ogdonia_FishRecords2 <- Brunnerdale.ogdonia_FishRecords1[,c(-3:-7, -9:-12)]
#Now we can finaly bring either all 3 data sets together, or just the fish records and either the land temperatue or water temperature data set together using the R bind function.
#But sicne the columns are not the same name, we need to downlaod this package so the R bind will work.
install.packages("dplyr")
library("dplyr")
Bind_ogdonia_masterland1 <- bind_rows(Brunnerdale.ogdonia_FishRecords2, Brunnerdale_Land_Temp)
#Before I try to compare fish and temperature together, I want to just look at temperature alone first.
#But first we need to format that date and time. To do that, lets install the luberdate package.
install.packages("lubridate")
library("lubridate")
#When you come back to this, mess with luberdate package for dates and tidy verse pacage, and then building the actual different model and using both air and water temps, or one or the other!!!!
#Always X and then Y for plots!
#Now need to get R to reed this as a year date and time rather than a string of numbers.
class(Brunnerdale_Land_Temp$DateTime)
class(Brunnerdale_Stream_Temp$DateTime)
#It's eneterd as a character, so need to change it to POSIXct
#First do land temp
Brunnerdale_Land_Temp$DateTime <- as.POSIXct(Brunnerdale_Land_Temp$DateTime)
class(Brunnerdale_Land_Temp$DateTime)
summary(Brunnerdale_Land_Temp)
#Do same thing for stream temp
Brunnerdale_Stream_Temp$DateTime <- as.POSIXct(Brunnerdale_Stream_Temp$DateTime)
class(Brunnerdale_Stream_Temp$DateTime)
summary(Brunnerdale_Land_Temp)
#Now that its in the proper format, have to extract month as an individual column.
#First do land temp
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(Month=month(Brunnerdale_Land_Temp$DateTime, label = TRUE))
summary(Brunnerdale_Land_Temp_Updated)
#Now do stream temp
Brunnerdale_Stream_Temp_Updated <- Brunnerdale_Stream_Temp %>%
mutate(Month=month(Brunnerdale_Stream_Temp$DateTime, label = TRUE))
summary(Brunnerdale_Stream_Temp_Updated)
install.packages("readxl")
install.packages("dplyr")
install.packages("lubridate")
install.packages("lubridate")
View(Brunnerdale_Land_Temp_Updated)
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(Year=year(Brunnerdale_Land_Temp$DateTime))
summary(Brunnerdale_Land_Temp_Updated)
#Bellow seemed to work to get year as a column
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(Year=year, Month=month(Brunnerdale_Land_Temp$DateTime))
#Bellow seemed to work to get year as a column
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(Year=year, Month=month(Brunnerdale_Land_Temp$DateTime, label = TRUE))
#Bellow seemed to work to get year as a column
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(Year=year, Month=month(Brunnerdale_Land_Temp$DateTime, label = TRUE))
#Bellow seemed to work to get year as a column
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(YearMonth=ym, Month=month(Brunnerdale_Land_Temp$DateTime, label = TRUE))
#Bellow seemed to work to get year as a column
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(YearMonth=ym, Month=month(Brunnerdale_Land_Temp$DateTime))
rlang::last_trace()
rlang::last_trace(drop = FALSE)
View(Brunnerdale_Stream_Temp_Updated)
Brunnerdale_Land_Temp_Updated["year"] = Brunnerdale_Land_Temp_Updated["Year"].dt.year
Brunnerdale_Land_Temp_Updated["year"] <- Brunnerdale_Land_Temp_Updated["Year"].dt.year
Brunnerdale_Land_Temp_Updated["year"] <- Brunnerdale_Land_Temp_Updated["Year"]dt.year
#Bellow seemed to work to get year as a column
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(Year=year(Brunnerdale_Land_Temp$DateTime label = FALSE))
#Bellow seemed to work to get year as a column
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(Year=year(Brunnerdale_Land_Temp$DateTime, label = FALSE))
View(Brunnerdale_Land_Temp_Updated)
View(Brunnerdale_Land_Temp)
#Set working directory
setwd("C:/GitHub/johnson_capstone/data_testing")
getwd()
dir()
#First we will need to download the readxl package since one out of the three data sets is a .xlsx
install.packages("readxl")
library(readxl)
#So now I will read in the .xlsx file "Data.xlsx"
Brunnerdale.ogdonia_FishRecords <- read_excel("Brunnerdale.ogdonia_FishRecords.xlsx")
#Beware that using the read_excel function turns the data into a "tibble format".
#In order to fix this, I need to do the as.data.frame function
Brunnerdale.ogdonia_FishRecords1 <- as.data.frame(Brunnerdale.ogdonia_FishRecords)
#This other 2 datasets we need to read in are not excell files, their CSV's.
#Read in water temp data for Long term Loyalsock Project at the Brunnerdale location.
Brunnerdale_Stream_Temp <- read.csv("Brunnerdale_Run_Stream_X_QC.csv")
Brunnerdale_Land_Temp <- read.csv("Brunnerdale_Run_Land_X_QC.csv")
#Now that both CSV's are red in, we need  a unique identifier that brings the two data sets together.
#Luckily, both the temperature and fish data was taken in the same location (Brunnerdale Run at Ogdonia).
#However, these are not currency columns in the data tables, so I need to add a column.
#So lets add the column "Site Name" consiting of "Brunnerdale.ogdonia" to the Brunndedale stream and air temp tables
Brunnerdale_Stream_Temp$Site_Name <- "Brunnerdale.ogdonia"
Brunnerdale_Land_Temp$Site_Name <- "Brunnerdale.ogdonia"
#Now also add the column "Site Name" consiting of "Brunnerdale.ogdonia" to the Brunnerdale.ogdonia_FishRecords1 fish records data set
Brunnerdale.ogdonia_FishRecords1$Site_Name <- "Brunnerdale.ogdonia"
#In order to bring the 3 datasets together I will need to R bind, but first I will need to remove the columns from the Brunnerdale_Fish_Records_1 file that I don't want to use to have the same number of columns as Brunnerdale_Stream_Temp
# See above lines and edit columns taken out bellow ^??????
Brunnerdale.ogdonia_FishRecords2 <- Brunnerdale.ogdonia_FishRecords1[,c(-3:-7, -9:-12)]
#Now we can finaly bring either all 3 data sets together, or just the fish records and either the land temperatue or water temperature data set together using the R bind function.
#But sicne the columns are not the same name, we need to downlaod this package so the R bind will work.
install.packages("dplyr")
library("dplyr")
Bind_ogdonia_masterland1 <- bind_rows(Brunnerdale.ogdonia_FishRecords2, Brunnerdale_Land_Temp)
#Before I try to compare fish and temperature together, I want to just look at temperature alone first.
#But first we need to format that date and time. To do that, lets install the luberdate package.
install.packages("lubridate")
library("lubridate")
#When you come back to this, mess with luberdate package for dates and tidy verse pacage, and then building the actual different model and using both air and water temps, or one or the other!!!!
#Always X and then Y for plots!
#Now need to get R to reed this as a year date and time rather than a string of numbers.
class(Brunnerdale_Land_Temp$DateTime)
class(Brunnerdale_Stream_Temp$DateTime)
#It's eneterd as a character, so need to change it to POSIXct
#First do land temp
Brunnerdale_Land_Temp$DateTime <- as.POSIXct(Brunnerdale_Land_Temp$DateTime)
class(Brunnerdale_Land_Temp$DateTime)
summary(Brunnerdale_Land_Temp)
#Do same thing for stream temp
Brunnerdale_Stream_Temp$DateTime <- as.POSIXct(Brunnerdale_Stream_Temp$DateTime)
class(Brunnerdale_Stream_Temp$DateTime)
summary(Brunnerdale_Land_Temp)
#Now that its in the proper format, have to extract month as an individual column.
#First do land temp
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(Month=month(Brunnerdale_Land_Temp$DateTime, label = TRUE))
summary(Brunnerdale_Land_Temp_Updated)
#Now do stream temp
Brunnerdale_Stream_Temp_Updated <- Brunnerdale_Stream_Temp %>%
mutate(Month=month(Brunnerdale_Stream_Temp$DateTime, label = TRUE))
summary(Brunnerdale_Stream_Temp_Updated)
install.packages("readxl")
install.packages("dplyr")
install.packages("lubridate")
install.packages("dplyr")
install.packages("lubridate")
View(Brunnerdale_Land_Temp)
View(Brunnerdale_Land_Temp_Updated)
View(Brunnerdale_Land_Temp)
#Bellow seemed to work to get year as a column
Brunnerdale_Land_Temp_Updated5 <- Brunnerdale_Land_Temp_Updated %>%
mutate(Year=year(Brunnerdale_Land_Temp_Updated$DateTime))
summary(Brunnerdale_Land_Temp_Updated5)
View(Brunnerdale_Land_Temp_Updated5)
Brunnerdale_Stream_Temp_Updated5 <- Brunnerdale_Stream_Temp_Updated %>%
mutate(Year=year(Brunnerdale_Stream_Temp_Updated$DateTime))
summary(Brunnerdale_Stream_Temp_Updated5)
View(Brunnerdale_Stream_Temp_Updated5)
#Set working directory
setwd("C:/GitHub/johnson_capstone/data_testing")
getwd()
dir()
#First we will need to download the readxl package since one out of the three data sets is a .xlsx
install.packages("readxl")
library(readxl)
#So now I will read in the .xlsx file "Data.xlsx"
Brunnerdale.ogdonia_FishRecords <- read_excel("Brunnerdale.ogdonia_FishRecords.xlsx")
#Beware that using the read_excel function turns the data into a "tibble format".
#In order to fix this, I need to do the as.data.frame function
Brunnerdale.ogdonia_FishRecords1 <- as.data.frame(Brunnerdale.ogdonia_FishRecords)
#This other 2 datasets we need to read in are not excell files, their CSV's.
#Read in water temp data for Long term Loyalsock Project at the Brunnerdale location.
Brunnerdale_Stream_Temp <- read.csv("Brunnerdale_Run_Stream_X_QC.csv")
Brunnerdale_Land_Temp <- read.csv("Brunnerdale_Run_Land_X_QC.csv")
#Now that both CSV's are red in, we need  a unique identifier that brings the two data sets together.
#Luckily, both the temperature and fish data was taken in the same location (Brunnerdale Run at Ogdonia).
#However, these are not currency columns in the data tables, so I need to add a column.
#So lets add the column "Site Name" consiting of "Brunnerdale.ogdonia" to the Brunndedale stream and air temp tables
Brunnerdale_Stream_Temp$Site_Name <- "Brunnerdale.ogdonia"
Brunnerdale_Land_Temp$Site_Name <- "Brunnerdale.ogdonia"
#Now also add the column "Site Name" consiting of "Brunnerdale.ogdonia" to the Brunnerdale.ogdonia_FishRecords1 fish records data set
Brunnerdale.ogdonia_FishRecords1$Site_Name <- "Brunnerdale.ogdonia"
#In order to bring the 3 datasets together I will need to R bind, but first I will need to remove the columns from the Brunnerdale_Fish_Records_1 file that I don't want to use to have the same number of columns as Brunnerdale_Stream_Temp
# See above lines and edit columns taken out bellow ^??????
Brunnerdale.ogdonia_FishRecords2 <- Brunnerdale.ogdonia_FishRecords1[,c(-3:-7, -9:-12)]
#Now we can finaly bring either all 3 data sets together, or just the fish records and either the land temperatue or water temperature data set together using the R bind function.
#But sicne the columns are not the same name, we need to downlaod this package so the R bind will work.
install.packages("dplyr")
library("dplyr")
Bind_ogdonia_masterland1 <- bind_rows(Brunnerdale.ogdonia_FishRecords2, Brunnerdale_Land_Temp)
#Before I try to compare fish and temperature together, I want to just look at temperature alone first.
#But first we need to format that date and time. To do that, lets install the luberdate package.
install.packages("lubridate")
library("lubridate")
#When you come back to this, mess with luberdate package for dates and tidy verse pacage, and then building the actual different model and using both air and water temps, or one or the other!!!!
#Always X and then Y for plots!
#Now need to get R to reed this as a year date and time rather than a string of numbers.
class(Brunnerdale_Land_Temp$DateTime)
class(Brunnerdale_Stream_Temp$DateTime)
#It's eneterd as a character, so need to change it to POSIXct
#First do land temp
Brunnerdale_Land_Temp$DateTime <- as.POSIXct(Brunnerdale_Land_Temp$DateTime)
class(Brunnerdale_Land_Temp$DateTime)
summary(Brunnerdale_Land_Temp)
#Do same thing for stream temp
Brunnerdale_Stream_Temp$DateTime <- as.POSIXct(Brunnerdale_Stream_Temp$DateTime)
class(Brunnerdale_Stream_Temp$DateTime)
summary(Brunnerdale_Land_Temp)
#Now that its in the proper format, have to extract month as an individual column.
#First do land temp
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(Month=month(Brunnerdale_Land_Temp$DateTime, label = TRUE))
summary(Brunnerdale_Land_Temp_Updated)
#Now do stream temp
Brunnerdale_Stream_Temp_Updated <- Brunnerdale_Stream_Temp %>%
mutate(Month=month(Brunnerdale_Stream_Temp$DateTime, label = TRUE))
summary(Brunnerdale_Stream_Temp_Updated)
install.packages("readxl")
install.packages("dplyr")
install.packages("lubridate")
install.packages("dplyr")
install.packages("lubridate")
#Bellow seemed to work to get year as a column
#Now have to extract year as a new column
Brunnerdale_Land_Temp_YM <- Brunnerdale_Land_Temp_Updated %>%
mutate(Year=year(Brunnerdale_Land_Temp_Updated$DateTime))
summary(Brunnerdale_Land_Temp_Updated_YM)
summary(Brunnerdale_Land_Temp_YM)
View(Brunnerdale_Land_Temp_YM)
Brunnerdale_Stream_Temp_YM <- Brunnerdale_Stream_Temp_Updated %>%
mutate(Year=year(Brunnerdale_Stream_Temp_Updated$DateTime))
summary(Brunnerdale_Stream_Temp_YM)
View(Brunnerdale_Stream_Temp_YM)
View(Bind_ogdonia_masterland1)
Brunnerdale_LT_Master <- Brunnerdale_Land_Temp_YM %>%
unite(YearMonth, Year, Month, "-")
install.packages("tidyr")
library("tidyr")
Brunnerdale_LT_Master <- Brunnerdale_Land_Temp_YM %>%
unite(YearMonth, Year, Month, "-")
Brunnerdale_LT_Master <- Brunnerdale_Land_Temp_YM %>%
unite(YearMonth, Year, Month)
View(Brunnerdale_LT_Master)
Brunnerdale_ST_Master <- Brunnerdale_Stream_Temp_YM %>%
unite(YearMonth, Year, Month)
View(Brunnerdale_ST_Master)
Brunnerdale_ST_Master <- Brunnerdale_Stream_Temp_YM %>%
unite(YearMonth, Year, "-", Month)
View(Brunnerdale.ogdonia_FishRecords2)
=======
class(Brunnerdale_Land_Temp$DateTime)
as.POSIXct(Brunnerdale_Land_Temp$DateTime)
class(Brunnerdale_Land_Temp$DateTime)
BrunnerdaleLandTemp_Corrected <- as.POSIXct(Brunnerdale_Land_Temp$DateTime)
class(Brunnerdale_Land_Temp$DateTime)
IXct(Brunnerdale_Land_Temp$DateTime)
BrunnerdaleLandTemp_Corrected <- as.POSIXct(Brunnerdale_Land_Temp$DateTime)
class(BrunnerdaleLandTemp_Corrected)
Brunnerdale_Land_Temp$DateTime <- as.POSIXct(Brunnerdale_Land_Temp$DateTime)
class(Brunnerdale_Land_Temp)
class(Brunnerdale_Land_Temp$DateTime)
summary(Brunnerdale_Land_Temp)
View(Brunnerdale.ogdonia_FishRecords2)
View(Brunnerdale_Land_Temp)
View(Brunnerdale_Land_Temp)
install.packages("dplyr")
library("dplyr")
install.packages("dplyr")
library("dplyr")
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(month(Brunnerdale_Land_Temp$DateTime))
summary(Brunnerdale_Land_Temp_Updated)
View(Brunnerdale_Land_Temp_Updated)
View(Brunnerdale_Land_Temp_Updated)
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(Month=month(Brunnerdale_Land_Temp$DateTime))
summary(Brunnerdale_Land_Temp_Updated)
Brunnerdale_Land_Temp_Updated <- Brunnerdale_Land_Temp %>%
mutate(Month=month(Brunnerdale_Land_Temp$DateTime, label = TRUE))
summary(Brunnerdale_Land_Temp_Updated)
>>>>>>> Stashed changes
Set working directory
#Set working directory
setwd("C:/GitHub/johnson_capstone/data_testing")
getwd()
dir()
#All 3 excell files I'm going to read in are CSV's.
Painter_LT <- read.csv("Painter_Land_X_QC.csv")
Painter_ST00 <- read.csv("Painter_Stream_X_QC.csv")
Painter_ST01 <- read.csv("Painter_Stream0_X_QC.csv")
#The problem is the stream temperature data is split up into two data sets, and I want them as 1 data set.
#So lets merge the two.
Painter_ST <- merge(Painter_ST00, Painter_ST01, all = TRUE)
#This works, but the dates are not in order??????????
#Before I try to compare fish and temperature together, I want to just look at temperature alone first.
#But first we need to format that date and time. To do that, lets install the luberdate package.
install.packages("lubridate")
library("lubridate")
#Now need to get R to reed this as a year date and time rather than a string of numbers.
class(Painter_LT$DateTime)
class(Painter_ST$DateTime)
#It's eneterd as a character, so need to change it to POSIXct
#First do land temp
Painter_LT$DateTime <- as.POSIXct(Painter_LT$DateTime)
class(Painter_LT$DateTime)
summary(Painter_LT)
#Do same thing for stream temp
Painter_ST$DateTime <- as.POSIXct(Painter_ST$DateTime)
class(Painter_ST$DateTime)
summary(Painter_ST)
#Now that its in the proper format, have to extract month as an individual column.
#In order to do this we need to use the muate function, which is in the dplyr package.
install.packages("dplyr")
library(dplyr)
#First do land temp
Painter_LT_Updated <- Painter_LT %>%
mutate(Month=month(Painter_LT$DateTime, label = TRUE))
summary(Painter_LT_Updated)
#Now do stream temp
Painter_ST_Updated <- Painter_ST %>%
mutate(Month=month(Painter_ST$DateTime, label = TRUE))
summary(Painter_ST_Updated)
#Bellow seemed to work to get year as a column
#Now have to extract year as a new column
Painter_LT_YM <- Painter_LT_Updated %>%
mutate(Year=year(Painter_LT_Updated$DateTime))
summary(Painter_LT_YM)
Painter_ST_YM <- Painter_ST_Updated %>%
mutate(Year=year(Painter_ST_Updated$DateTime))
summary(Painter_ST_YM)
#Need to combine Year and Month columns to be one column formatted as [YYYY-MM].
#Will need ot use the unite function. To do that, install tidyr package.
install.packages("tidyr")
library(tidyr)
#Now try uniting Year and Month Columns.
#For Land temp:
Painter_LT_Master <- Painter_LT_YM %>%
unite(YearMonth, Year, Month)
#For Stream temp:
Painter_ST_Master <- Painter_ST_YM %>%
unite(YearMonth, Year, Month)
Brunnerdale_ST_Master <- Brunnerdale_Stream_Temp_YM %>%
unite(YearMonth, Year, Month)
#So it works, however if I leave the "-" in their as it is in line 114-115 in the data testing_1.R docuument, it gives me an error message saying
#"Error in unite()'
#Can't subset columns that don't exist.
#Column '-' doesn't exist."
#It gives an _ in between the year and month column instead of -.
Painter_ST <- arrange(Painter_ST, DateTime)
View(Painter_ST)
Brunnerdale_ST_Master <- Brunnerdale_Stream_Temp_YM %>%
unite(YearMonth, Year, Month)
View(Painter_LT_Master)
View(Painter_ST_Master)
Painter_LT_Master <- Painter_LT_YM %>%
unite(YearMonth, Year, Month, sep = "-")
View(Painter_LT_Master)
View(Painter_LT_Master)
#For Stream temp:
Painter_ST_Master <- Painter_ST_YM %>%
unite(YearMonth, Year, Month, sep = "-")
View(Painter_ST_Master)
View(Painter_ST_Master)
Painter_ST_Master %>%
group_by(YearMonth) %>%
View(Painter_ST_Master)
View(Painter_ST_Master)
View(Painter_ST_Master)
Painter_Stream_Summary <- Painter_ST_Master %>%
group_by(YearMonth) %>%
Painter_Stream_Summary <- Painter_ST_Master %>%
group_by(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C)
Painter_Stream_Summary <- Painter_ST_Master %>%
Painter_Stream_Summary <- Painter_ST_Master %>%
select(YearMonth, Temp_C) %>%
group_by(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C))
Painter_Stream_Summary
View(Painter_Stream_Summary)
Painter_Stream_Summary <- Painter_ST_Master %>%
select(YearMonth, Temp_C) %>%
group_by(YearMonth) %>%
arrange(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C))
Painter_Stream_Summary
Painter_LT_Updated <- Painter_LT %>%
mutate(Month=month(Painter_LT$DateTime, label = FALSE))
View(Painter_LT_Updated)
#Now do stream temp
Painter_ST_Updated <- Painter_ST %>%
mutate(Month=month(Painter_ST$DateTime, label = FALSE))
Painter_LT_Master <- Painter_LT_YM %>%
unite(YearMonth, Year, Month, sep = "-")
#For Stream temp:
Painter_ST_Master <- Painter_ST_YM %>%
unite(YearMonth, Year, Month, sep = "-")
Painter_Stream_Summary <- Painter_ST_Master %>%
select(YearMonth, Temp_C) %>%
group_by(YearMonth) %>%
arrange(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C))
Painter_Stream_Summary
#Set working directory
setwd("C:/GitHub/johnson_capstone/data_testing")
getwd()
dir()
#All 3 excell files I'm going to read in are CSV's.
Painter_LT <- read.csv("Painter_Land_X_QC.csv")
Painter_ST00 <- read.csv("Painter_Stream_X_QC.csv")
Painter_ST01 <- read.csv("Painter_Stream0_X_QC.csv")
#The problem is the stream temperature data is split up into two data sets, and I want them as 1 data set.
#So lets merge the two.
Painter_ST <- merge(Painter_ST00, Painter_ST01, all = TRUE)
#To arrange dates in right order:
Painter_ST <- arrange(Painter_ST, DateTime)
#Before I try to compare fish and temperature together, I want to just look at temperature alone first.
#But first we need to format that date and time. To do that, lets install the luberdate package.
install.packages("lubridate")
library("lubridate")
#Now need to get R to reed this as a year date and time rather than a string of numbers.
class(Painter_LT$DateTime)
class(Painter_ST$DateTime)
#It's eneterd as a character, so need to change it to POSIXct
#First do land temp
Painter_LT$DateTime <- as.POSIXct(Painter_LT$DateTime)
class(Painter_LT$DateTime)
summary(Painter_LT)
#Do same thing for stream temp
Painter_ST$DateTime <- as.POSIXct(Painter_ST$DateTime)
class(Painter_ST$DateTime)
summary(Painter_ST)
#Now that its in the proper format, have to extract month as an individual column.
#In order to do this we need to use the muate function, which is in the dplyr package.
install.packages("dplyr")
library(dplyr)
#First do land temp
Painter_LT_Updated <- Painter_LT %>%
mutate(Month=month(Painter_LT$DateTime, label = FALSE))
summary(Painter_LT_Updated)
#Now do stream temp
Painter_ST_Updated <- Painter_ST %>%
mutate(Month=month(Painter_ST$DateTime, label = FALSE))
summary(Painter_ST_Updated)
#Bellow seemed to work to get year as a column
#Now have to extract year as a new column
Painter_LT_YM <- Painter_LT_Updated %>%
mutate(Year=year(Painter_LT_Updated$DateTime))
summary(Painter_LT_YM)
Painter_ST_YM <- Painter_ST_Updated %>%
mutate(Year=year(Painter_ST_Updated$DateTime))
summary(Painter_ST_YM)
#Need to combine Year and Month columns to be one column formatted as [YYYY-MM].
#Will need ot use the unite function. To do that, install tidyr package.
install.packages("tidyr")
library(tidyr)
#Now try uniting Year and Month Columns.
#For Land temp:
Painter_LT_Master <- Painter_LT_YM %>%
unite(YearMonth, Year, Month, sep = "-")
#For Stream temp:
Painter_ST_Master <- Painter_ST_YM %>%
unite(YearMonth, Year, Month, sep = "-")
#So it works, however if I leave the "-" in their as it is in line 114-115 in the data testing_1.R docuument, it gives me an error message saying
#"Error in unite()'
#Can't subset columns that don't exist.
#Column '-' doesn't exist."
#It gives an _ in between the year and month column instead of -.
Painter_Stream_Summary <- Painter_ST_Master %>%
select(YearMonth, Temp_C) %>%
group_by(YearMonth) %>%
arrange(YearMonth) %>%
summarise(AvgYearMonthTemp = mean(Temp_C))
Painter_Stream_Summary
install.packages("tidyr")
install.packages("dplyr")
install.packages("lubridate")
install.packages("utf8")
